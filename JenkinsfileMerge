STABLE_LABEL = "stable"

properties(
        [
                parameters(
                        [
                                string(name: 'ghprbGhRepository',
                                        defaultValue: 'scoheb/containerCIDemo',
                                        description: 'repo for containerCIDemo'
                                ),
                                string(name: 'ghprbActualCommit',
                                        defaultValue: 'master',
                                        description: 'commit or branch to use from ghprbGhRepository'
                                ),
                                string(name: 'COMPONENT1_TAG',
                                        defaultValue: STABLE_LABEL,
                                        description: 'Tag for component1 image'
                                ),
                                string(name: 'COMPONENT2_TAG',
                                        defaultValue: STABLE_LABEL,
                                        description: 'Tag for component2 image'
                                ),
                                string(name: 'DOCKER_REPO_URL',
                                        defaultValue: '172.30.254.79:5000',
                                        description: 'Docker repo url for Openshift instance'
                                ),
                                string(name: 'OPENSHIFT_NAMESPACE',
                                        defaultValue: 'continuous-infra-devel',
                                        description: 'Project namespace for Openshift operations',
                                ),
                                string(name: 'OPENSHIFT_SERVICE_ACCOUNT',
                                        defaultValue: 'devel-jenkins',
                                        description: 'Service Account for Openshift operations',
                                ),
                        ]
                ),
        ]
)

library identifier: "cico-pipeline-library@master",
        retriever: modernSCM([$class: 'GitSCMSource',
                              remote: "https://github.com/CentOS/cico-pipeline-library",
                              traits: [[$class: 'jenkins.plugins.git.traits.BranchDiscoveryTrait'],
                                       [$class: 'RefSpecsSCMSourceTrait',
                                        templates: [[value: '+refs/heads/*:refs/remotes/@{remote}/*'],
                                                    [value: '+refs/pull/*:refs/remotes/origin/pr/*']]]]])

library(identifier: "ci-pipeline@master",
        retriever: modernSCM([$class: 'GitSCMSource',
                              remote: "https://github.com/CentOS-PaaS-SIG/ci-pipeline",
                              traits: [[$class: 'jenkins.plugins.git.traits.BranchDiscoveryTrait'],
                                       [$class: 'RefSpecsSCMSourceTrait',
                                        templates: [[value: '+refs/heads/*:refs/remotes/@{remote}/*']]]]]))


// Add new images here
imageList = ["component1", "component2"]
imageOperations = []

pipeline {
    agent {
        kubernetes {
            cloud 'openshift'
            label 'merge-' + env.ghprbActualCommit
            serviceAccount params.OPENSHIFT_SERVICE_ACCOUNT
            containerTemplate {
                name 'jnlp'
                args '${computer.jnlpmac} ${computer.name}'
                image 'openshift/jenkins-slave-base-centos7:3.7.0'
                ttyEnabled false
                command ''
            }
        }
    }
    stages {
        stage("Detect Images to Promote") {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject(params.OPENSHIFT_NAMESPACE) {
                            imageList.each {
                                String tagList = sh(
                                        script: "oc get is -n ${params.OPENSHIFT_NAMESPACE} -o=jsonpath=\'{.items[?(@.metadata.name==\"${it}\")].status.tags[*].tag}\'",
                                        returnStdout: true
                                ).trim()
                                def prTag = tagList.tokenize(' ').find { it == "PR-" + env.ghprbPullId }
                                if (prTag != null) {
                                    echo "Found PR tag: " + prTag + " for image ${it}"
                                    imageOperations.add(it)
                                } else {
                                    echo "No tag found for image ${it}!"
                                }
                            }
                        }
                    }
                }
            }
        }
        stage("Merge PR and Rebuild Images") {
            steps {
                // lock to make sure only one is allowed at anytime
                lock('merge-and-image-rebuild-lock') {
                    script {
                        // need this for ghprb plugin since it is really
                        // a post build step and it assumes the build is complete.
                        currentBuild.result = 'SUCCESS'
                    }

                    step([$class: 'GhprbPullRequestMerge', allowMergeWithoutTriggerPhrase: false,
                          deleteOnMerge: false, disallowOwnCode: false, failOnNonMerge: false,
                          mergeComment: ' ', onlyAdminsMerge: false])

                    script {
                        openshift.withCluster() {
                            openshift.withProject(params.OPENSHIFT_NAMESPACE) {
                                imageOperations.each {
                                    pipelineUtils.buildStableImage(params.OPENSHIFT_NAMESPACE, it)
                                }
                            }
                        }
                        pipelineUtils.sendPRCommentforTags(imageOperations)
                    }
                }
            }
        }
    }
}

