STABLE_LABEL = "latest"

properties(
        [
                parameters(
                        [
                                string(name: 'ghprbGhRepository',
                                        defaultValue: 'scoheb/containerCIDemo',
                                        description: 'repo for containerCIDemo'
                                ),
                                string(name: 'ghprbActualCommit',
                                        defaultValue: 'master',
                                        description: 'commit or branch to use from ghprbGhRepository'
                                ),
                                string(name: 'COMPONENT1_TAG',
                                        defaultValue: STABLE_LABEL,
                                        description: 'Tag for component1 image'
                                ),
                                string(name: 'COMPONENT2_TAG',
                                        defaultValue: STABLE_LABEL,
                                        description: 'Tag for component2 image'
                                ),
                                string(name: 'DOCKER_REPO_URL',
                                        defaultValue: '172.30.254.79:5000',
                                        description: 'Docker repo url for Openshift instance'
                                ),
                                string(name: 'OPENSHIFT_NAMESPACE',
                                        defaultValue: 'continuous-infra-devel',
                                        description: 'Project namespace for Openshift operations',
                                ),
                                string(name: 'OPENSHIFT_SERVICE_ACCOUNT',
                                        defaultValue: 'devel-jenkins',
                                        description: 'Service Account for Openshift operations',
                                ),
                        ]
                ),
        ]
)

// If this PR does not include an image change, then use this tag
tagMap = [:]

// Initialize
tagMap['component1'] = STABLE_LABEL
tagMap['component2'] = STABLE_LABEL

library identifier: "cico-pipeline-library@master",
        retriever: modernSCM([$class: 'GitSCMSource',
                              remote: "https://github.com/CentOS/cico-pipeline-library",
                              traits: [[$class: 'jenkins.plugins.git.traits.BranchDiscoveryTrait'],
                                       [$class: 'RefSpecsSCMSourceTrait',
                                        templates: [[value: '+refs/heads/*:refs/remotes/@{remote}/*'],
                                                    [value: '+refs/pull/*:refs/remotes/origin/pr/*']]]]])

library(identifier: "ci-pipeline@master",
        retriever: modernSCM([$class: 'GitSCMSource',
                              remote: "https://github.com/CentOS-PaaS-SIG/ci-pipeline",
                              traits: [[$class: 'jenkins.plugins.git.traits.BranchDiscoveryTrait'],
                                       [$class: 'RefSpecsSCMSourceTrait',
                                        templates: [[value: '+refs/heads/*:refs/remotes/@{remote}/*']]]]]))

pipeline {
    agent {
        kubernetes {
            cloud 'openshift'
            label 'trigger-' + env.ghprbActualCommit
            serviceAccount params.OPENSHIFT_SERVICE_ACCOUNT
            containerTemplate {
                name 'jnlp'
                args '${computer.jnlpmac} ${computer.name}'
                image 'openshift/jenkins-slave-base-centos7:3.7.0'
                ttyEnabled false
                command ''
            }
        }
    }
    stages {
        stage("Get Changelog") {
            steps {
                node('master') {
                    script {
                        echo "PR number is: ${env.ghprbPullId}"
                        env.changeLogStr = pipelineUtils.getChangeLogFromCurrentBuild()
                        echo env.changeLogStr
                    }
                    writeFile file: 'changelog.txt', text: env.changeLogStr
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'changelog.txt'
                }
            }
        }
        stage("component1 image build") {
            when {
                // Only build if we have related files in changeset
                changeset "config/component1/**"
            }
            steps {
                script {
                    tagMap['component1'] = pipelineUtils.buildImage(params.OPENSHIFT_NAMESPACE, "component1")
                }
            }
        }
        stage("component2 image build") {
            when {
                // Only build if we have related files in changeset
                changeset "config/component2/**"
            }
            steps {
                script {
                    tagMap['component2'] = pipelineUtils.buildImage(params.OPENSHIFT_NAMESPACE, "component2")
                }
            }
        }
        stage("Image Tag Report") {
            steps {
                script {
                    pipelineUtils.printLabelMap(tagMap)
                }
            }
        }
        stage("Run Stage Jobs") {
            steps {
                build job: 'containerCIDemo',
                        parameters: [
                                string(name: 'ghprbActualCommit', value: "${params.ghprbActualCommit}"),
                                string(name: 'ghprbGhRepository', value: "${params.ghprbGhRepository}"),
                                string(name: 'ghprbPullAuthorLogin', value: "${env.ghprbPullAuthorLogin}"),
                                string(name: 'sha1', value: "${env.sha1}"),
                                string(name: 'ghprbPullId', value: "${env.ghprbPullId}"),
                                string(name: 'COMPONENT1_TAG', value: tagMap['component1']),
                                string(name: 'COMPONENT2_TAG', value: tagMap['component2']),
                        ],
                        wait: true
            }
        }
    }
    post {
        success {
            echo "yay!"
        }
        failure {
            error "build failed!"
        }
    }
}
